#!/bin/python

"""mpx: MultiPatchX plot and validation utility.

Usage:
  mpx augment <data-file> <coord-file>
  mpx plot <augmented-data> <var> [--rhs] [--save] [--diverging]
  mpx (-h | --help)
  mpx --version

Options:
  -h --help    Show this screen.
  --version    Show version.
  --rhs        Plot RHS variables.
  --save       Save plot to file.
  --diverging  Use a diverging color map.
"""

import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import subprocess
import os

from docopt import docopt


def augment_file(state_file, coord_file):
    print("Augmenting", state_file, "with coordinate data from", coord_file)

    p1 = subprocess.Popen(
        [
            "cut",
            "-f12,13,14",
            coord_file
        ],
        stdout=subprocess.PIPE
    )

    fout = open(os.path.basename(state_file), "w")

    subprocess.run(
        [
            "paste",
            state_file,
            "-"
        ],
        stdin=p1.stdout,
        stdout=fout
    )

    p1.wait()
    fout.close()


def make_plot(x, y, z, var, save_file, diverging):
    plt.close("all")

    if diverging == True:
        plt.tricontourf(
            x,
            y,
            z,
            cmap="seismic",
            levels=100
        )
    else:
        plt.tricontourf(
            x,
            y,
            z,
            levels=100  # np.linspace(0.0, 0.04, 100),
        )

    cb = plt.colorbar()
    cb.ax.set_ylabel(var)

    plt.tight_layout()

    if not save_file:
        plt.show()
    else:
        plt.savefig(var + ".png")

    plt.close("all")


def plot(vars1, vars2, arguments):
    # Arguments
    rhs = arguments["--rhs"]
    augmented_state_data = arguments["<augmented-data>"]
    var = arguments["<var>"]
    save_file = arguments["--save"]
    diverging = arguments["--diverging"]

    # Datafile vars, for pandas
    if rhs:
        vars = vars1 + ["u_rhs", "rho_rhs"] + vars2
    else:
        vars = vars1 + ["u", "rho"] + vars2

    print("Reading data")
    data = pd.read_csv(augmented_state_data,
                       delim_whitespace=True, names=vars, comment="#")

    # Z slice data
    print("Filtering data for the z = 0 slice")

    sliced_data = data.loc[
        (data["vcoordz"] == 0.0) &
        (np.abs(data["x"]) <= 1.0) &
        (np.abs(data["y"]) <= 1.0) &
        (np.abs(data["z"]) <= 1.0)
    ]

    # RHS error data
    if rhs:
        print("Creating error plot")

        expected = -3.0 * np.pi**2 * np.cos(np.pi * sliced_data["vcoordx"]) * np.cos(
            np.pi * sliced_data["vcoordy"])
        error = np.abs(expected - sliced_data[var])

        max_error = np.amax(error)
        error = error / max_error

        make_plot(sliced_data["vcoordx"], sliced_data["vcoordy"],
                  error, var + "_err", save_file, diverging)

    print("Creating data plot")
    make_plot(sliced_data["vcoordx"], sliced_data["vcoordy"],
              sliced_data[var], var, save_file, diverging)


def main():
    arguments = docopt(__doc__, version="mpx 1.0")

    # MPL settings.
    mpl.rcParams['mathtext.fontset'] = 'cm'
    mpl.rcParams['font.family'] = 'Latin Modern Roman'

    # Common file vars
    vars1 = [
        "iteration",
        "time",
        "patch",
        "level",
        "component",
        "i",
        "j",
        "k",
        "x",
        "y",
        "z",
    ]

    vars2 = [
        "vcoordx",
        "vcoordy",
        "vcoordz"
    ]

    if arguments["augment"]:
        augment_file(arguments["<data-file>"], arguments["<coord-file>"])
    elif arguments["plot"] == True:
        plot(vars1, vars2, arguments)


main()
